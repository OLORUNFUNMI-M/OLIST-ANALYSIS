USE olist;
-- CHECKED FOR NULL VALUES IN ALL OLIST TABLE
-- CHECKED FOR NULL VALUES IN THE CUSTOMER TABLE
SELECT *
FROM customers
WHERE customer_id IS NULL
OR customer_unique_id IS NULL
OR customer_zip_code_prefix IS NULL
OR customer_city IS NULL
OR customer_state IS NULL;
-- result= no null values

-- CHECKED FOR NULL VALUES IN THE GEOLOCATION TABLE
SELECT * 
FROM geolocation
WHERE geolocation_zip_code_prefix IS NULL
OR geolocation_lat IS NULL
OR geolocation_lng IS NULL
OR geolocation_city IS NULL
OR geolocation_state IS NULL;
-- result = no null values

-- CHECKED THE ORDER ITEMS TABLE FOR NULL VALUES
SELECT *
FROM order_items
WHERE order_id IS NULL
OR order_item_id IS NULL
OR product_id IS NULL
OR seller_id IS NULL
OR shipping_limit_date IS NULL
OR price IS NULL
OR freight_value IS NULL;
-- result = no null value found

-- CHECKED FOR NULL VALUES IN THE ORDER PAYMENT TABLE
SELECT *
FROM order_payment
WHERE order_id IS NULL
OR payment_sequential IS NULL
OR payment_type IS NULL
OR payment_installments IS NULL
OR payment_value IS NULL;
-- result= No null values found

-- CHECKED THE ORDERS TABLE FOR NULL VALUES
SELECT *
FROM orders
WHERE order_id IS NULL
OR customer_id IS NULL
OR order_status IS NULL
OR order_purchase_timestamp IS NULL
OR order_approved_at IS NULL;
-- result = no null values

-- CHECKED FOR NULL VALUES IN THE PRODUCT TABLE
SELECT *
FROM products
WHERE product_id IS NULL
OR  product_category_name IS NULL;
-- result = no null values

-- CHECKED FOR DUPLICATE ROWS IN THE CUSTOMER TABLE
SELECT customer_id, count(customer_id) customer_count
FROM customers
GROUP BY customer_id
HAVING COUNT(customer_id) > 1;
--- result = the query did not return any thing , so there are no duplicate rows

-- 2. NUMBER OF CUSTOMERS
SELECT count(*) Customer_count
FROM customers;
-- result = 9944 

--  3. CHECKED THE STATE OUR CUTOMERS ARE FROM
SELECT DISTINCT(geolocation_state)
FROM geolocation;
-- result = all customer are from one geolocation state 'SP'

-- 4. TOTAL NUMBER OF ITEMS ORDERED
SELECT count(*) number_of_orders
FROM order_items;
-- result = 25611 items ordered

-- 5.Payment type used by customers
SELECT DISTINCT(payment_type)
FROM order_payment;
-- result = BOLETO, VOUCHER,DEBIT CARD, CREDIT CARD

-- 6.NUMBER OF PRODUCTS 
SELECT COUNT( DISTINCT product_category_name)
FROM products;
-- result = 67 products

-- 7. TOTAL REVENUE GENERATED 
SELECT SUM(payment_value) TOTAL_REVENUE
FROM order_payment;
-- result = 802418.059

-- 8. HOW IS THE SALES TREND OVER THE YEARS
SELECT YEAR(order_purchase_timestamp) order_year, SUM(payment_value) TOTAL_REVENUE
FROM order_payment
JOIN orders
ON order_payment.order_id = orders.order_id
GROUP BY 1
ORDER BY 2 DESC;
-- result = year 2018 generated 24286.659 , year 2017 generated 18405.51

-- 9. REVENUE GENERATED BY MONTH
SELECT MONTH(order_purchase_timestamp) order_year, SUM(payment_value) TOTAL_REVENUE
FROM order_payment
JOIN orders
ON order_payment.order_id = orders.order_id
GROUP BY 1
ORDER BY 2 DESC;
-- result = 5th month generated most revenue and the 9th month generated the least revenue

-- 10. WHAT IS THE FLOW OF REVENUE BY PAYMENT TYPE
SELECT SUM(payment_value) PAYMENT_TYPE_REVENUE, payment_type
FROM order_payment
GROUP BY payment_type
ORDER BY payment_type_revenue DESC;
--- result = credit card- 640575.339, boleto- 129540.119, voucher- 21027.439, debit card -11275.160

-- 11. TOP 3 CITIES BASED ON REVENUE GENERATED
SELECT SUM(payment_value) CITY_REVENUE, customers.customer_city
FROM customers
JOIN orders
ON orders.customer_id = customers.customer_id
JOIN order_payment
ON order_payment.order_id = orders.order_id
GROUP BY customers.customer_city
ORDER BY city_revenue DESC
LIMIT 3;
-- result = Sao paulo generated 8519.91, rio de janeiro 2133.08, contagem 1308.84

-- 12. TOP 5 PRODUCTS BY REVENUE GENERATED
SELECT SUM(payment_value) PRODUCT_REVENUE, product_category_name
FROM order_payment
JOIN order_items
ON order_payment.order_id = order_items.order_id
JOIN products
ON products.product_id = order_items.product_id
GROUP BY products.product_category_name
ORDER BY PRODUCT_REVENUE DESC
LIMIT 5;
-- result = utilidades_domesticas, telefonia, cama_mesa_banho, moveis_decoracao,perfumaria

-- 13. WHAT STATE ARE THE TOP 3 SELLERS FROM
SELECT COUNT(*) NUMBER_ORDERS, sellers.seller_state
FROM sellers
JOIN order_items
ON sellers.seller_id = order_items.seller_id
GROUP BY sellers.seller_state
ORDER BY NUMBER_ORDERS DESC
LIMIT 3;
-- result = SP, MG, PR

-- 14. HOW MANY BAD ORDER REVIWEW DID WE RECIEVE
SELECT CASE WHEN review_score >=4 THEN 'GOOD ORDER REVIEW'
WHEN review_score = 3 THEN 'NOT BAD'
WHEN review_score =1 THEN 'BAD ORDER REVIEW'
ELSE 'NO REVIEW' END AS REVIEW,
COUNT(*)
FROM order_reviews
GROUP BY 1;
 -- result = 38 bad order review

-- 15. MONTH WITH THE HIGHEST NUMBER OF BAD REVIEWS
SELECT 
MONTH(review_creation_date) MONTHLY,
SUM(CASE WHEN review_score = 1 THEN 1 ELSE 0 END) AS BAD_REVIEWS_COUNT
FROM order_reviews
WHERE review_score = 1
GROUP BY 1
ORDER BY BAD_REVIEWS_COUNT DESC
LIMIT 3;
--- results = 4th, 8th and 3rd month had 6 bad reviews